# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

# NOTE: Due to AWS Amplify lack of support for polymorphism or union types, we had to denormalized the
# schema significantly.

# FUTURE IMPROVEMENT: A strategy to bypasses the lack of support would be to create an intermediary
# model called Entry to store metadata like author, createdAt, Entry type discriminator. Each
# entry's actual data are stored in their respective Entry models. However, this approach would
# require GraphQL resolvers, which are beyond our current scope and beta testing deadline.

enum ChemicalType {
    """
    Specifies the type of chemical an operator is calibrating and dosing.

    COAGULANT: Used during flocculation where organic matters are accumulated for filtering.
    CHLORINE: Used for disinfecting purposes.
    """
    COAGULANT
    CHLORINE
}

enum CoagType {
    """
    Specifies the type of coagulant a plant is using. This Enum should be used in calibration and
    dose entries whenever ChemType is COAGULANT.

    ALUM_SULFATE: Aluminium Sulfate.
    POLY_ALUM_CHLOR: Poly Aluminium Chloride.
    """
    ALUM_SULFATE
    POLY_ALUM_CHLOR
}

enum ActiveTank {
    """
    Specifies the tank an operator is currently using. Each plant usually has a dual tank system
    for coagulants and a separate tank for chlorine.
    """
    TANK_A
    TANK_B
}

type Plant @model {
    """
    Represents a water treatment plant.

    Fields:
    id: Autogenerated unique identifier for the plant.
    name: Name of the plant.
    operators: List of operators working at the Plant.
    ____Entries: List of ___Entries associated with Plant, sorted by createdAt attribute.

    Relationships:
    Has many Operator entries.
    Has many entries of various data types for graphical visualization over varying time.
    """
    id: ID!
    name: String!
    # Field "id" refers to Plant.id, whose value aligns with Operator.plantID
    operators: [Operator] @hasMany(indexName: "OperatorByPlant", fields: ["id"])
}

type Operator @model {
    """
    Represents an operator working at a plant.

    Fields:
    id: Autogenerated unique identifier for the operator.
    name: Name of the operator.
    plantID: Identifier of the plant the operator is associated with.
    ____Entries: List of ___Entries associated with Plant, sorted by createdAt attribute.

    Relationships:
    Belongs to a Plant.
    Has many entries variants for tracking operator submission history.
    """
    id: ID!
    name: String!
    # Creates an index whose primaryKey is made of partitionKey "plantID" and sortKey "Operator.id"
    plantID: ID! @index(name: "OperatorByPlant", sortKeyFields: ["id"])
}