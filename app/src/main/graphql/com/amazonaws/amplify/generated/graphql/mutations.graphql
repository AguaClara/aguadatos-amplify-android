# this is an auto generated file. This will be overwritten

mutation CreatePlant(
  $input: CreatePlantInput!
  $condition: ModelPlantConditionInput
) {
  createPlant(input: $input, condition: $condition) {
    id
    operators {
      nextToken
      startedAt
      __typename
    }
    createdAt
    updatedAt
    _version
    _deleted
    _lastChangedAt
    __typename
  }
}

mutation UpdatePlant(
  $input: UpdatePlantInput!
  $condition: ModelPlantConditionInput
) {
  updatePlant(input: $input, condition: $condition) {
    id
    operators {
      nextToken
      startedAt
      __typename
    }
    createdAt
    updatedAt
    _version
    _deleted
    _lastChangedAt
    __typename
  }
}

mutation DeletePlant(
  $input: DeletePlantInput!
  $condition: ModelPlantConditionInput
) {
  deletePlant(input: $input, condition: $condition) {
    id
    operators {
      nextToken
      startedAt
      __typename
    }
    createdAt
    updatedAt
    _version
    _deleted
    _lastChangedAt
    __typename
  }
}

mutation CreateOperator(
  $input: CreateOperatorInput!
  $condition: ModelOperatorConditionInput
) {
  createOperator(input: $input, condition: $condition) {
    id
    name
    plantID
    plantFlowEntries {
      nextToken
      startedAt
      __typename
    }
    rawWaterEntries {
      nextToken
      startedAt
      __typename
    }
    clarifiedWaterEntries {
      nextToken
      startedAt
      __typename
    }
    filteredWaterEntries {
      nextToken
      startedAt
      __typename
    }
    coagulantCalibrationEntries {
      nextToken
      startedAt
      __typename
    }
    coagulantChangeDoseEntries {
      nextToken
      startedAt
      __typename
    }
    chlorineCalibrationEntries {
      nextToken
      startedAt
      __typename
    }
    chlorineChangeDoseEntries {
      nextToken
      startedAt
      __typename
    }
    feedbackEntries {
      nextToken
      startedAt
      __typename
    }
    createdAt
    updatedAt
    _version
    _deleted
    _lastChangedAt
    __typename
  }
}

mutation UpdateOperator(
  $input: UpdateOperatorInput!
  $condition: ModelOperatorConditionInput
) {
  updateOperator(input: $input, condition: $condition) {
    id
    name
    plantID
    plantFlowEntries {
      nextToken
      startedAt
      __typename
    }
    rawWaterEntries {
      nextToken
      startedAt
      __typename
    }
    clarifiedWaterEntries {
      nextToken
      startedAt
      __typename
    }
    filteredWaterEntries {
      nextToken
      startedAt
      __typename
    }
    coagulantCalibrationEntries {
      nextToken
      startedAt
      __typename
    }
    coagulantChangeDoseEntries {
      nextToken
      startedAt
      __typename
    }
    chlorineCalibrationEntries {
      nextToken
      startedAt
      __typename
    }
    chlorineChangeDoseEntries {
      nextToken
      startedAt
      __typename
    }
    feedbackEntries {
      nextToken
      startedAt
      __typename
    }
    createdAt
    updatedAt
    _version
    _deleted
    _lastChangedAt
    __typename
  }
}

mutation DeleteOperator(
  $input: DeleteOperatorInput!
  $condition: ModelOperatorConditionInput
) {
  deleteOperator(input: $input, condition: $condition) {
    id
    name
    plantID
    plantFlowEntries {
      nextToken
      startedAt
      __typename
    }
    rawWaterEntries {
      nextToken
      startedAt
      __typename
    }
    clarifiedWaterEntries {
      nextToken
      startedAt
      __typename
    }
    filteredWaterEntries {
      nextToken
      startedAt
      __typename
    }
    coagulantCalibrationEntries {
      nextToken
      startedAt
      __typename
    }
    coagulantChangeDoseEntries {
      nextToken
      startedAt
      __typename
    }
    chlorineCalibrationEntries {
      nextToken
      startedAt
      __typename
    }
    chlorineChangeDoseEntries {
      nextToken
      startedAt
      __typename
    }
    feedbackEntries {
      nextToken
      startedAt
      __typename
    }
    createdAt
    updatedAt
    _version
    _deleted
    _lastChangedAt
    __typename
  }
}

mutation CreatePlantFlowEntry(
  $input: CreatePlantFlowEntryInput!
  $condition: ModelPlantFlowEntryConditionInput
) {
  createPlantFlowEntry(input: $input, condition: $condition) {
    id
    plantID
    operatorID
    creationDateTime
    additionalNotes
    inflowRate
    createdAt
    updatedAt
    _version
    _deleted
    _lastChangedAt
    __typename
  }
}

mutation UpdatePlantFlowEntry(
  $input: UpdatePlantFlowEntryInput!
  $condition: ModelPlantFlowEntryConditionInput
) {
  updatePlantFlowEntry(input: $input, condition: $condition) {
    id
    plantID
    operatorID
    creationDateTime
    additionalNotes
    inflowRate
    createdAt
    updatedAt
    _version
    _deleted
    _lastChangedAt
    __typename
  }
}

mutation DeletePlantFlowEntry(
  $input: DeletePlantFlowEntryInput!
  $condition: ModelPlantFlowEntryConditionInput
) {
  deletePlantFlowEntry(input: $input, condition: $condition) {
    id
    plantID
    operatorID
    creationDateTime
    additionalNotes
    inflowRate
    createdAt
    updatedAt
    _version
    _deleted
    _lastChangedAt
    __typename
  }
}

mutation CreateRawWaterEntry(
  $input: CreateRawWaterEntryInput!
  $condition: ModelRawWaterEntryConditionInput
) {
  createRawWaterEntry(input: $input, condition: $condition) {
    id
    plantID
    operatorID
    creationDateTime
    additionalNotes
    turbidity
    createdAt
    updatedAt
    _version
    _deleted
    _lastChangedAt
    __typename
  }
}

mutation UpdateRawWaterEntry(
  $input: UpdateRawWaterEntryInput!
  $condition: ModelRawWaterEntryConditionInput
) {
  updateRawWaterEntry(input: $input, condition: $condition) {
    id
    plantID
    operatorID
    creationDateTime
    additionalNotes
    turbidity
    createdAt
    updatedAt
    _version
    _deleted
    _lastChangedAt
    __typename
  }
}

mutation DeleteRawWaterEntry(
  $input: DeleteRawWaterEntryInput!
  $condition: ModelRawWaterEntryConditionInput
) {
  deleteRawWaterEntry(input: $input, condition: $condition) {
    id
    plantID
    operatorID
    creationDateTime
    additionalNotes
    turbidity
    createdAt
    updatedAt
    _version
    _deleted
    _lastChangedAt
    __typename
  }
}

mutation CreateClarifiedWaterEntry(
  $input: CreateClarifiedWaterEntryInput!
  $condition: ModelClarifiedWaterEntryConditionInput
) {
  createClarifiedWaterEntry(input: $input, condition: $condition) {
    id
    plantID
    operatorID
    creationDateTime
    additionalNotes
    turbidity
    createdAt
    updatedAt
    _version
    _deleted
    _lastChangedAt
    __typename
  }
}

mutation UpdateClarifiedWaterEntry(
  $input: UpdateClarifiedWaterEntryInput!
  $condition: ModelClarifiedWaterEntryConditionInput
) {
  updateClarifiedWaterEntry(input: $input, condition: $condition) {
    id
    plantID
    operatorID
    creationDateTime
    additionalNotes
    turbidity
    createdAt
    updatedAt
    _version
    _deleted
    _lastChangedAt
    __typename
  }
}

mutation DeleteClarifiedWaterEntry(
  $input: DeleteClarifiedWaterEntryInput!
  $condition: ModelClarifiedWaterEntryConditionInput
) {
  deleteClarifiedWaterEntry(input: $input, condition: $condition) {
    id
    plantID
    operatorID
    creationDateTime
    additionalNotes
    turbidity
    createdAt
    updatedAt
    _version
    _deleted
    _lastChangedAt
    __typename
  }
}

mutation CreateFilteredWaterEntry(
  $input: CreateFilteredWaterEntryInput!
  $condition: ModelFilteredWaterEntryConditionInput
) {
  createFilteredWaterEntry(input: $input, condition: $condition) {
    id
    plantID
    operatorID
    creationDateTime
    additionalNotes
    turbidityValues
    createdAt
    updatedAt
    _version
    _deleted
    _lastChangedAt
    __typename
  }
}

mutation UpdateFilteredWaterEntry(
  $input: UpdateFilteredWaterEntryInput!
  $condition: ModelFilteredWaterEntryConditionInput
) {
  updateFilteredWaterEntry(input: $input, condition: $condition) {
    id
    plantID
    operatorID
    creationDateTime
    additionalNotes
    turbidityValues
    createdAt
    updatedAt
    _version
    _deleted
    _lastChangedAt
    __typename
  }
}

mutation DeleteFilteredWaterEntry(
  $input: DeleteFilteredWaterEntryInput!
  $condition: ModelFilteredWaterEntryConditionInput
) {
  deleteFilteredWaterEntry(input: $input, condition: $condition) {
    id
    plantID
    operatorID
    creationDateTime
    additionalNotes
    turbidityValues
    createdAt
    updatedAt
    _version
    _deleted
    _lastChangedAt
    __typename
  }
}

mutation CreateCoagulantCalibrationEntry(
  $input: CreateCoagulantCalibrationEntryInput!
  $condition: ModelCoagulantCalibrationEntryConditionInput
) {
  createCoagulantCalibrationEntry(input: $input, condition: $condition) {
    id
    plantID
    operatorID
    creationDateTime
    sliderPosition
    inflowRate
    startVolume
    endVolume
    timeElapsed
    chemicalDose
    chemicalFlowRate
    activeTankVolume
    chemicalType
    createdAt
    updatedAt
    _version
    _deleted
    _lastChangedAt
    __typename
  }
}

mutation UpdateCoagulantCalibrationEntry(
  $input: UpdateCoagulantCalibrationEntryInput!
  $condition: ModelCoagulantCalibrationEntryConditionInput
) {
  updateCoagulantCalibrationEntry(input: $input, condition: $condition) {
    id
    plantID
    operatorID
    creationDateTime
    sliderPosition
    inflowRate
    startVolume
    endVolume
    timeElapsed
    chemicalDose
    chemicalFlowRate
    activeTankVolume
    chemicalType
    createdAt
    updatedAt
    _version
    _deleted
    _lastChangedAt
    __typename
  }
}

mutation DeleteCoagulantCalibrationEntry(
  $input: DeleteCoagulantCalibrationEntryInput!
  $condition: ModelCoagulantCalibrationEntryConditionInput
) {
  deleteCoagulantCalibrationEntry(input: $input, condition: $condition) {
    id
    plantID
    operatorID
    creationDateTime
    sliderPosition
    inflowRate
    startVolume
    endVolume
    timeElapsed
    chemicalDose
    chemicalFlowRate
    activeTankVolume
    chemicalType
    createdAt
    updatedAt
    _version
    _deleted
    _lastChangedAt
    __typename
  }
}

mutation CreateCoagulantChangeDoseEntry(
  $input: CreateCoagulantChangeDoseEntryInput!
  $condition: ModelCoagulantChangeDoseEntryConditionInput
) {
  createCoagulantChangeDoseEntry(input: $input, condition: $condition) {
    id
    plantID
    operatorID
    creationDateTime
    chemicalFlowRate
    chemicalDose
    sliderPosition
    targetChemicalDose
    updatedSliderPosition
    updatedChemicalFlowRate
    chemicalType
    createdAt
    updatedAt
    _version
    _deleted
    _lastChangedAt
    __typename
  }
}

mutation UpdateCoagulantChangeDoseEntry(
  $input: UpdateCoagulantChangeDoseEntryInput!
  $condition: ModelCoagulantChangeDoseEntryConditionInput
) {
  updateCoagulantChangeDoseEntry(input: $input, condition: $condition) {
    id
    plantID
    operatorID
    creationDateTime
    chemicalFlowRate
    chemicalDose
    sliderPosition
    targetChemicalDose
    updatedSliderPosition
    updatedChemicalFlowRate
    chemicalType
    createdAt
    updatedAt
    _version
    _deleted
    _lastChangedAt
    __typename
  }
}

mutation DeleteCoagulantChangeDoseEntry(
  $input: DeleteCoagulantChangeDoseEntryInput!
  $condition: ModelCoagulantChangeDoseEntryConditionInput
) {
  deleteCoagulantChangeDoseEntry(input: $input, condition: $condition) {
    id
    plantID
    operatorID
    creationDateTime
    chemicalFlowRate
    chemicalDose
    sliderPosition
    targetChemicalDose
    updatedSliderPosition
    updatedChemicalFlowRate
    chemicalType
    createdAt
    updatedAt
    _version
    _deleted
    _lastChangedAt
    __typename
  }
}

mutation CreateChlorineCalibrationEntry(
  $input: CreateChlorineCalibrationEntryInput!
  $condition: ModelChlorineCalibrationEntryConditionInput
) {
  createChlorineCalibrationEntry(input: $input, condition: $condition) {
    id
    plantID
    operatorID
    creationDateTime
    sliderPosition
    inflowRate
    startVolume
    endVolume
    timeElapsed
    chemicalDose
    chemicalFlowRate
    activeTankVolume
    chemicalType
    createdAt
    updatedAt
    _version
    _deleted
    _lastChangedAt
    __typename
  }
}

mutation UpdateChlorineCalibrationEntry(
  $input: UpdateChlorineCalibrationEntryInput!
  $condition: ModelChlorineCalibrationEntryConditionInput
) {
  updateChlorineCalibrationEntry(input: $input, condition: $condition) {
    id
    plantID
    operatorID
    creationDateTime
    sliderPosition
    inflowRate
    startVolume
    endVolume
    timeElapsed
    chemicalDose
    chemicalFlowRate
    activeTankVolume
    chemicalType
    createdAt
    updatedAt
    _version
    _deleted
    _lastChangedAt
    __typename
  }
}

mutation DeleteChlorineCalibrationEntry(
  $input: DeleteChlorineCalibrationEntryInput!
  $condition: ModelChlorineCalibrationEntryConditionInput
) {
  deleteChlorineCalibrationEntry(input: $input, condition: $condition) {
    id
    plantID
    operatorID
    creationDateTime
    sliderPosition
    inflowRate
    startVolume
    endVolume
    timeElapsed
    chemicalDose
    chemicalFlowRate
    activeTankVolume
    chemicalType
    createdAt
    updatedAt
    _version
    _deleted
    _lastChangedAt
    __typename
  }
}

mutation CreateChlorineChangeDoseEntry(
  $input: CreateChlorineChangeDoseEntryInput!
  $condition: ModelChlorineChangeDoseEntryConditionInput
) {
  createChlorineChangeDoseEntry(input: $input, condition: $condition) {
    id
    plantID
    operatorID
    creationDateTime
    chemicalFlowRate
    chemicalDose
    sliderPosition
    targetChemicalDose
    updatedSliderPosition
    updatedChemicalFlowRate
    chemicalType
    createdAt
    updatedAt
    _version
    _deleted
    _lastChangedAt
    __typename
  }
}

mutation UpdateChlorineChangeDoseEntry(
  $input: UpdateChlorineChangeDoseEntryInput!
  $condition: ModelChlorineChangeDoseEntryConditionInput
) {
  updateChlorineChangeDoseEntry(input: $input, condition: $condition) {
    id
    plantID
    operatorID
    creationDateTime
    chemicalFlowRate
    chemicalDose
    sliderPosition
    targetChemicalDose
    updatedSliderPosition
    updatedChemicalFlowRate
    chemicalType
    createdAt
    updatedAt
    _version
    _deleted
    _lastChangedAt
    __typename
  }
}

mutation DeleteChlorineChangeDoseEntry(
  $input: DeleteChlorineChangeDoseEntryInput!
  $condition: ModelChlorineChangeDoseEntryConditionInput
) {
  deleteChlorineChangeDoseEntry(input: $input, condition: $condition) {
    id
    plantID
    operatorID
    creationDateTime
    chemicalFlowRate
    chemicalDose
    sliderPosition
    targetChemicalDose
    updatedSliderPosition
    updatedChemicalFlowRate
    chemicalType
    createdAt
    updatedAt
    _version
    _deleted
    _lastChangedAt
    __typename
  }
}

mutation CreateFeedbackEntry(
  $input: CreateFeedbackEntryInput!
  $condition: ModelFeedbackEntryConditionInput
) {
  createFeedbackEntry(input: $input, condition: $condition) {
    id
    plantID
    operatorID
    creationDateTime
    feedback
    createdAt
    updatedAt
    _version
    _deleted
    _lastChangedAt
    __typename
  }
}

mutation UpdateFeedbackEntry(
  $input: UpdateFeedbackEntryInput!
  $condition: ModelFeedbackEntryConditionInput
) {
  updateFeedbackEntry(input: $input, condition: $condition) {
    id
    plantID
    operatorID
    creationDateTime
    feedback
    createdAt
    updatedAt
    _version
    _deleted
    _lastChangedAt
    __typename
  }
}

mutation DeleteFeedbackEntry(
  $input: DeleteFeedbackEntryInput!
  $condition: ModelFeedbackEntryConditionInput
) {
  deleteFeedbackEntry(input: $input, condition: $condition) {
    id
    plantID
    operatorID
    creationDateTime
    feedback
    createdAt
    updatedAt
    _version
    _deleted
    _lastChangedAt
    __typename
  }
}
